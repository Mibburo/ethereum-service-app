package com.example.ethereumserviceapp.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings("rawtypes")
public class CaseMonitor extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50611d85806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063ccabda5111610066578063ccabda51146101fb578063d4988c1514610253578063d840e717146102ac578063ea028820146104f3578063fb40c22a1461055257610093565b80631464db8014610098578063235f4c12146100f957806345b10ce41461013a57806356066bed1461018f575b600080fd5b6100f7600480360360808110156100ae57600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190803590602001909291908035151590602001909291905050506105b1565b005b6101386004803603602081101561010f57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610696565b005b6101796004803603602081101561015057600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610d16565b6040518082815260200191505060405180910390f35b6101f9600480360360a08110156101a557600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190505050610d59565b005b6102516004803603606081101561021157600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190803560ff169060200190929190505050610fe2565b005b6102926004803603602081101561026957600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506110d4565b604051808215151515815260200191505060405180910390f35b6102eb600480360360208110156102c257600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919050505061115c565b604051808a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001898152602001806020018060200188600481111561033557fe5b60ff1681526020018060200180602001806020018060200187810387528e818151815260200191508051906020019060200280838360005b8381101561038857808201518184015260208101905061036d565b5050505090500187810386528d818151815260200191508051906020019060200280838360005b838110156103ca5780820151818401526020810190506103af565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b8381101561040c5780820151818401526020810190506103f1565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b8381101561044e578082015181840152602081019050610433565b50505050905001878103835289818151815260200191508051906020019060200280838360005b83811015610490578082015181840152602081019050610475565b50505050905001878103825288818151815260200191508051906020019060200280838360005b838110156104d25780820151818401526020810190506104b7565b505050509050019f5050505050505050505050505050505060405180910390f35b61053c6004803603604081101561050957600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190505050611442565b6040518082815260200191505060405180910390f35b61055a611850565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561059d578082015181840152602081019050610582565b505050509050019250505060405180910390f35b6105ba846110d4565b6105c357600080fd5b60006105ce85610d16565b905060008082815481106105de57fe5b9060005260206000209060090201905060008090505b816005018054905081101561068d578582600501828154811061061357fe5b90600052602060002001541415610680578482600701828154811061063457fe5b90600052602060002001819055508382600801828154811061065257fe5b90600052602060002090602091828204019190066101000a81548160ff02191690831515021790555061068d565b80806001019150506105f4565b50505050505050565b61069f816110d4565b6106a857600080fd5b60006106b382610d16565b90506001600080549050038114610c4f576106cc61193c565b600082815481106106d957fe5b9060005260206000209060090201604051806101200160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001600182015481526020016002820180548060200260200160405190810160405280929190818152602001828054801561078957602002820191906000526020600020905b815481526020019060010190808311610775575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561080f57602002820191906000526020600020906000905b82829054906101000a900460ff1660048111156107e957fe5b815260200190600101906020826000010492830192600103820291508084116107d05790505b505050505081526020016004820160009054906101000a900460ff16600481111561083657fe5b600481111561084157fe5b81526020016005820180548060200260200160405190810160405280929190818152602001828054801561089457602002820191906000526020600020905b815481526020019060010190808311610880575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156108ec57602002820191906000526020600020905b8154815260200190600101908083116108d8575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561094457602002820191906000526020600020905b815481526020019060010190808311610930575b50505050508152602001600882018054806020026020016040519081016040528092919081815260200182805480156109c157602002820191906000526020600020906000905b82829054906101000a900460ff1615158152602001906001019060208260000104928301926001038202915080841161098b5790505b50505050508152505090506000600160008054905003815481106109e157fe5b9060005260206000209060090201600083815481106109fc57fe5b90600052602060002090600902016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550600182015481600101556002820181600201908054610a679291906119a6565b506003820181600301908054610a7e9291906119f8565b506004820160009054906101000a900460ff168160040160006101000a81548160ff02191690836004811115610ab057fe5b02179055506005820181600501908054610acb9291906119a6565b506006820181600601908054610ae29291906119a6565b506007820181600701908054610af99291906119a6565b506008820181600801908054610b10929190611a58565b5090505080600060016000805490500381548110610b2a57fe5b906000526020600020906009020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550602082015181600101556040820151816002019080519060200190610b8e929190611ab8565b506060820151816003019080519060200190610bab929190611b05565b5060808201518160040160006101000a81548160ff02191690836004811115610bd057fe5b021790555060a0820151816005019080519060200190610bf1929190611ab8565b5060c0820151816006019080519060200190610c0e929190611ab8565b5060e0820151816007019080519060200190610c2b929190611ab8565b50610100820151816008019080519060200190610c49929190611bb4565b50905050505b6000805480610c5a57fe5b6001900381819060005260206000209060090201600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160009055600282016000610caa9190611c5a565b600382016000610cba9190611c7b565b6004820160006101000a81549060ff0219169055600582016000610cde9190611c5a565b600682016000610cee9190611c5a565b600782016000610cfe9190611c5a565b600882016000610d0e9190611ca3565b505090555050565b600060016000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b610d62856110d4565b610d6b57600080fd5b6000610d7686610d16565b90506000808281548110610d8657fe5b90600052602060002090600902019050600081600501600081548110610da857fe5b90600052602060002001541415610e56578481600501600081548110610dca57fe5b90600052602060002001819055508381600601600081548110610de957fe5b90600052602060002001819055508281600701600081548110610e0857fe5b9060005260206000200181905550600081600801600081548110610e2857fe5b90600052602060002090602091828204019190066101000a81548160ff021916908315150217905550610f2b565b806005018590806001815401808255809150509060018203906000526020600020016000909192909190915055508060060184908060018154018082558091505090600182039060005260206000200160009091929091909150555080600701839080600181540180825580915050906001820390600052602060002001600090919290919091505550806008016000908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908315150217905550505b848160010181905550806002018590806001815401808255809150509060018203906000526020600020016000909192909190915055508060030186908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff02191690836004811115610fae57fe5b021790555050858160040160006101000a81548160ff02191690836004811115610fd457fe5b021790555050505050505050565b610feb836110d4565b610ff457600080fd5b6000610fff84610d16565b9050600080828154811061100f57fe5b90600052602060002090600902019050838160010181905550806002018490806001815401808255809150509060018203906000526020600020016000909192909190915055508060030183908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360048111156110a257fe5b021790555050828160040160006101000a81548160ff021916908360048111156110c857fe5b02179055505050505050565b60008060008054905014156110ec5760009050611157565b816fffffffffffffffffffffffffffffffff1916600061110b84610d16565b8154811061111557fe5b906000526020600020906009020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff191614156111565760019050611157565b5b919050565b60008060608060006060806060806111738a6110d4565b61117c57600080fd5b6000806111888c610d16565b8154811061119257fe5b906000526020600020906009020190508060000160009054906101000a900460801b816001015482600201836003018460040160009054906101000a900460ff16856005018660060187600701886008018680548060200260200160405190810160405280929190818152602001828054801561122e57602002820191906000526020600020905b81548152602001906001019080831161121a575b50505050509650858054806020026020016040519081016040528092919081815260200182805480156112ae57602002820191906000526020600020906000905b82829054906101000a900460ff16600481111561128857fe5b8152602001906001019060208260000104928301926001038202915080841161126f5790505b505050505095508380548060200260200160405190810160405280929190818152602001828054801561130057602002820191906000526020600020905b8154815260200190600101908083116112ec575b505050505093508280548060200260200160405190810160405280929190818152602001828054801561135257602002820191906000526020600020905b81548152602001906001019080831161133e575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156113a457602002820191906000526020600020905b815481526020019060010190808311611390575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561141b57602002820191906000526020600020906000905b82829054906101000a900460ff161515815260200190600101906020826000010492830192600103820291508084116113e55790505b50505050509050995099509950995099509950995099509950509193959799909294969850565b600061144d836110d4565b1561145757600080fd5b606060016040519080825280602002602001820160405280156114895781602001602082028038833980820191505090505b509050828160008151811061149a57fe5b602002602001018181525050606060016040519080825280602002602001820160405280156114d85781602001602082028038833980820191505090505b5090506000816000815181106114ea57fe5b602002602001019060048111156114fd57fe5b9081600481111561150a57fe5b81525050606060016040519080825280602002602001820160405280156115405781602001602082028038833980820191505090505b50905060008160008151811061155257fe5b602002602001018181525050606060016040519080825280602002602001820160405280156115905781602001602082028038833980820191505090505b5090506000816000815181106115a257fe5b602002602001018181525050606060016040519080825280602002602001820160405280156115e05781602001602082028038833980820191505090505b5090506000816000815181106115f257fe5b602002602001018181525050606060016040519080825280602002602001820160405280156116305781602001602082028038833980820191505090505b50905060008160008151811061164257fe5b60200260200101901515908115158152505060006040518061012001604052808b6fffffffffffffffffffffffffffffffff191681526020018a81526020018881526020018781526020016000600481111561169a57fe5b8152602001868152602001858152602001848152602001838152509080600181540180825580915050906001820390600052602060002090600902016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550602082015181600101556040820151816002019080519060200190611736929190611ab8565b506060820151816003019080519060200190611753929190611b05565b5060808201518160040160006101000a81548160ff0219169083600481111561177857fe5b021790555060a0820151816005019080519060200190611799929190611ab8565b5060c08201518160060190805190602001906117b6929190611ab8565b5060e08201518160070190805190602001906117d3929190611ab8565b506101008201518160080190805190602001906117f1929190611bb4565b505050506000600160008054905003905080600160008c6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020819055508097505050505050505092915050565b6060806000805490506040519080825280602002602001820160405280156118875781602001602082028038833980820191505090505b5090506000808054905011156119355760008090506000808054905090505b600081111561193257600060018203815481106118bf57fe5b906000526020600020906009020160000160009054906101000a900460801b8383806001019450815181106118f057fe5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250508080600190039150506118a6565b50505b8091505090565b60405180610120016040528060006fffffffffffffffffffffffffffffffff191681526020016000815260200160608152602001606081526020016000600481111561198457fe5b8152602001606081526020016060815260200160608152602001606081525090565b8280548282559060005260206000209081019282156119e75760005260206000209182015b828111156119e65782548255916001019190600101906119cb565b5b5090506119f49190611ccb565b5090565b82805482825590600052602060002090601f01602090048101928215611a4757600052602060002091601f016020900482015b82811115611a46578254825591600101919060010190611a2b565b5b509050611a549190611cf0565b5090565b82805482825590600052602060002090601f01602090048101928215611aa757600052602060002091601f016020900482015b82811115611aa6578254825591600101919060010190611a8b565b5b509050611ab49190611d20565b5090565b828054828255906000526020600020908101928215611af4579160200282015b82811115611af3578251825591602001919060010190611ad8565b5b509050611b019190611ccb565b5090565b82805482825590600052602060002090601f01602090048101928215611ba35791602002820160005b83821115611b7457835183826101000a81548160ff02191690836004811115611b5357fe5b02179055509260200192600101602081600001049283019260010302611b2e565b8015611ba15782816101000a81549060ff0219169055600101602081600001049283019260010302611b74565b505b509050611bb09190611cf0565b5090565b82805482825590600052602060002090601f01602090048101928215611c495791602002820160005b83821115611c1a57835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302611bdd565b8015611c475782816101000a81549060ff0219169055600101602081600001049283019260010302611c1a565b505b509050611c569190611d20565b5090565b5080546000825590600052602060002090810190611c789190611ccb565b50565b50805460008255601f016020900490600052602060002090810190611ca09190611ccb565b50565b50805460008255601f016020900490600052602060002090810190611cc89190611ccb565b50565b611ced91905b80821115611ce9576000816000905550600101611cd1565b5090565b90565b611d1d91905b80821115611d1957600081816101000a81549060ff021916905550600101611cf6565b5090565b90565b611d4d91905b80821115611d4957600081816101000a81549060ff021916905550600101611d26565b5090565b9056fea265627a7a723158200391467a7ac3b68b8127083beba83a6765aacc8c017511e6766ece88ecbe1bdf64736f6c63430005100032";

    public static final String FUNC__GETCASEINDEX = "_getCaseIndex";

    public static final String FUNC_ADDCASE = "addCase";

    public static final String FUNC_UPDATECASE = "updateCase";

    public static final String FUNC_ADDPAYMENT = "addPayment";

    public static final String FUNC_UPDATEEXISTINGPAYMENT = "updateExistingPayment";

    public static final String FUNC_CASEEXISTS = "caseExists";

    public static final String FUNC_GETALLCASES = "getAllCases";

    public static final String FUNC_GETCASE = "getCase";

    public static final String FUNC_DELETECASE = "deleteCase";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("3", "0xc862286AC7B717f29f1428F8eE53EADc3F207487");
    }

    @Deprecated
    protected CaseMonitor(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CaseMonitor(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CaseMonitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CaseMonitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> _getCaseIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETCASEINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addCase(byte[] _uuid, BigInteger _date) {
        final Function function = new Function(
                FUNC_ADDCASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint256(_date)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCase(byte[] _uuid, BigInteger _date, BigInteger _state) {
        final Function function = new Function(
                FUNC_UPDATECASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint256(_date), 
                new org.web3j.abi.datatypes.generated.Uint8(_state)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPayment(byte[] _uuid, BigInteger _state, BigInteger _pDate, BigInteger _payHistory, BigInteger _offset) {
        final Function function = new Function(
                FUNC_ADDPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint8(_state), 
                new org.web3j.abi.datatypes.generated.Uint256(_pDate), 
                new org.web3j.abi.datatypes.generated.Uint256(_payHistory), 
                new org.web3j.abi.datatypes.generated.Uint256(_offset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateExistingPayment(byte[] _uuid, BigInteger _pDate, BigInteger _offset, Boolean _offsetPaid) {
        final Function function = new Function(
                FUNC_UPDATEEXISTINGPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint256(_pDate), 
                new org.web3j.abi.datatypes.generated.Uint256(_offset), 
                new org.web3j.abi.datatypes.Bool(_offsetPaid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> caseExists(byte[] _uuid) {
        final Function function = new Function(FUNC_CASEEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getAllCases() {
        final Function function = new Function(FUNC_GETALLCASES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes16>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple9<byte[], BigInteger, List<BigInteger>, List<BigInteger>, BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<Boolean>>> getCase(byte[] _uuid) {
        final Function function = new Function(FUNC_GETCASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<Uint8>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
        return new RemoteFunctionCall<Tuple9<byte[], BigInteger, List<BigInteger>, List<BigInteger>, BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<Boolean>>>(function,
                new Callable<Tuple9<byte[], BigInteger, List<BigInteger>, List<BigInteger>, BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<Boolean>>>() {
                    @Override
                    public Tuple9<byte[], BigInteger, List<BigInteger>, List<BigInteger>, BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<Boolean>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<byte[], BigInteger, List<BigInteger>, List<BigInteger>, BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<Boolean>>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint8>) results.get(3).getValue()), 
                                (BigInteger) results.get(4).getValue(), 
                                convertToNative((List<Uint256>) results.get(5).getValue()), 
                                convertToNative((List<Uint256>) results.get(6).getValue()), 
                                convertToNative((List<Uint256>) results.get(7).getValue()), 
                                convertToNative((List<Bool>) results.get(8).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deleteCase(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETECASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CaseMonitor load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CaseMonitor(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CaseMonitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CaseMonitor(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CaseMonitor load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CaseMonitor(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CaseMonitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CaseMonitor(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CaseMonitor.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CaseMonitor.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CaseMonitor.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CaseMonitor.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
