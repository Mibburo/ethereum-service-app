package com.example.ethereumserviceapp.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings("rawtypes")
public class CaseMonitor extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b506116ea806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d36cf4a31161005b578063d36cf4a31461021a578063d4988c1514610315578063d840e7171461036e578063fb40c22a1461050c5761007d565b8063235f4c121461008257806345b10ce4146100c3578063bb98be4014610118575b600080fd5b6100c16004803603602081101561009857600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919050505061056b565b005b610102600480360360208110156100d957600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610ac7565b6040518082815260200191505060405180910390f35b6102046004803603608081101561012e57600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291908035906020019064010000000081111561016857600080fd5b82018360208201111561017a57600080fd5b8035906020019184600183028401116401000000008311171561019c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080351515906020019092919080359060200190929190505050610b0a565b6040518082815260200191505060405180910390f35b610313600480360360a081101561023057600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291908035906020019064010000000081111561026a57600080fd5b82018360208201111561027c57600080fd5b8035906020019184600183028401116401000000008311171561029e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080351515906020019092919080359060200190929190803560ff169060200190929190505050610d8d565b005b6103546004803603602081101561032b57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610eb6565b604051808215151515815260200191505060405180910390f35b6103ad6004803603602081101561038457600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610f3e565b60405180886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020018060200187151515158152602001868152602001806020018060200185600381111561040557fe5b60ff16815260200184810384528a818151815260200191508051906020019080838360005b8381101561044557808201518184015260208101905061042a565b50505050905090810190601f1680156104725780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019060200280838360005b838110156104ae578082015181840152602081019050610493565b50505050905001848103825286818151815260200191508051906020019060200280838360005b838110156104f05780820151818401526020810190506104d5565b505050509050019a505050505050505050505060405180910390f35b610514611151565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561055757808201518184015260208101905061053c565b505050509050019250505060405180910390f35b61057481610eb6565b61057d57600080fd5b600061058882610ac7565b90506001600080549050038114610a1c576105a161123d565b600082815481106105ae57fe5b90600052602060002090600702016040518060e00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561069d5780601f106106725761010080835404028352916020019161069d565b820191906000526020600020905b81548152906001019060200180831161068057829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382015481526020016004820180548060200260200160405190810160405280929190818152602001828054801561071a57602002820191906000526020600020905b815481526020019060010190808311610706575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156107a057602002820191906000526020600020906000905b82829054906101000a900460ff16600381111561077a57fe5b815260200190600101906020826000010492830192600103820291508084116107615790505b505050505081526020016006820160009054906101000a900460ff1660038111156107c757fe5b60038111156107d257fe5b8152505090506000600160008054905003815481106107ed57fe5b90600052602060002090600702016000838154811061080857fe5b90600052602060002090600702016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506001820181600101908054600181600116156101000203166002900461087a92919061129a565b506002820160009054906101000a900460ff168160020160006101000a81548160ff0219169083151502179055506003820154816003015560048201816004019080546108c8929190611321565b5060058201816005019080546108df929190611373565b506006820160009054906101000a900460ff168160060160006101000a81548160ff0219169083600381111561091157fe5b02179055509050508060006001600080549050038154811061092f57fe5b906000526020600020906007020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160010190805190602001906109899291906113d3565b5060408201518160020160006101000a81548160ff0219169083151502179055506060820151816003015560808201518160040190805190602001906109d0929190611453565b5060a08201518160050190805190602001906109ed9291906114a0565b5060c08201518160060160006101000a81548160ff02191690836003811115610a1257fe5b0217905550905050505b6000805480610a2757fe5b6001900381819060005260206000209060070201600080820160006101000a8154906fffffffffffffffffffffffffffffffff0219169055600182016000610a6f919061154f565b6002820160006101000a81549060ff02191690556003820160009055600482016000610a9b9190611597565b600582016000610aab91906115b8565b6006820160006101000a81549060ff0219169055505090555050565b600060016000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b6000610b1585610eb6565b15610b1f57600080fd5b60606001604051908082528060200260200182016040528015610b515781602001602082028038833980820191505090505b5090508281600081518110610b6257fe5b60200260200101818152505060606001604051908082528060200260200182016040528015610ba05781602001602082028038833980820191505090505b509050600081600081518110610bb257fe5b60200260200101906003811115610bc557fe5b90816003811115610bd257fe5b8152505060006040518060e00160405280896fffffffffffffffffffffffffffffffff19168152602001888152602001871515815260200186815260200184815260200183815260200160006003811115610c2957fe5b8152509080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506020820151816001019080519060200190610ca39291906113d3565b5060408201518160020160006101000a81548160ff021916908315150217905550606082015181600301556080820151816004019080519060200190610cea929190611453565b5060a0820151816005019080519060200190610d079291906114a0565b5060c08201518160060160006101000a81548160ff02191690836003811115610d2c57fe5b02179055505050506000600160008054905003905080600160008a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002081905550809350505050949350505050565b610d9685610eb6565b610d9f57600080fd5b6000610daa86610ac7565b90506000808281548110610dba57fe5b9060005260206000209060070201905085816001019080519060200190610de29291906115e0565b50848160020160006101000a81548160ff021916908315150217905550838160030181905550806004018490806001815401808255809150509060018203906000526020600020016000909192909190915055508060050183908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff02191690836003811115610e8257fe5b021790555050828160060160006101000a81548160ff02191690836003811115610ea857fe5b021790555050505050505050565b6000806000805490501415610ece5760009050610f39565b816fffffffffffffffffffffffffffffffff19166000610eed84610ac7565b81548110610ef757fe5b906000526020600020906007020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19161415610f385760019050610f39565b5b919050565b600060606000806060806000610f5388610eb6565b610f5c57600080fd5b600080610f688a610ac7565b81548110610f7257fe5b906000526020600020906007020190508060000160009054906101000a900460801b816001018260020160009054906101000a900460ff16836003015484600401856005018660060160009054906101000a900460ff16858054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561105e5780601f106110335761010080835404028352916020019161105e565b820191906000526020600020905b81548152906001019060200180831161104157829003601f168201915b50505050509550828054806020026020016040519081016040528092919081815260200182805480156110b057602002820191906000526020600020905b81548152602001906001019080831161109c575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561113057602002820191906000526020600020906000905b82829054906101000a900460ff16600381111561110a57fe5b815260200190600101906020826000010492830192600103820291508084116110f15790505b50505050509150975097509750975097509750975050919395979092949650565b6060806000805490506040519080825280602002602001820160405280156111885781602001602082028038833980820191505090505b5090506000808054905011156112365760008090506000808054905090505b600081111561123357600060018203815481106111c057fe5b906000526020600020906007020160000160009054906101000a900460801b8383806001019450815181106111f157fe5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250508080600190039150506111a7565b50505b8091505090565b6040518060e0016040528060006fffffffffffffffffffffffffffffffff19168152602001606081526020016000151581526020016000815260200160608152602001606081526020016000600381111561129457fe5b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112d35780548555611310565b8280016001018555821561131057600052602060002091601f016020900482015b8281111561130f5782548255916001019190600101906112f4565b5b50905061131d9190611660565b5090565b8280548282559060005260206000209081019282156113625760005260206000209182015b82811115611361578254825591600101919060010190611346565b5b50905061136f9190611660565b5090565b82805482825590600052602060002090601f016020900481019282156113c257600052602060002091601f016020900482015b828111156113c15782548255916001019190600101906113a6565b5b5090506113cf9190611685565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061141457805160ff1916838001178555611442565b82800160010185558215611442579182015b82811115611441578251825591602001919060010190611426565b5b50905061144f9190611660565b5090565b82805482825590600052602060002090810192821561148f579160200282015b8281111561148e578251825591602001919060010190611473565b5b50905061149c9190611660565b5090565b82805482825590600052602060002090601f0160209004810192821561153e5791602002820160005b8382111561150f57835183826101000a81548160ff021916908360038111156114ee57fe5b021790555092602001926001016020816000010492830192600103026114c9565b801561153c5782816101000a81549060ff021916905560010160208160000104928301926001030261150f565b505b50905061154b9190611685565b5090565b50805460018160011615610100020316600290046000825580601f106115755750611594565b601f0160209004906000526020600020908101906115939190611660565b5b50565b50805460008255906000526020600020908101906115b59190611660565b50565b50805460008255601f0160209004906000526020600020908101906115dd9190611660565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061162157805160ff191683800117855561164f565b8280016001018555821561164f579182015b8281111561164e578251825591602001919060010190611633565b5b50905061165c9190611660565b5090565b61168291905b8082111561167e576000816000905550600101611666565b5090565b90565b6116b291905b808211156116ae57600081816101000a81549060ff02191690555060010161168b565b5090565b9056fea265627a7a7231582024b132a2dfe2e1b7f353ad308637390dcd879b7e92043f33421e198e31869f4864736f6c63430005100032";

    public static final String FUNC__GETCASEINDEX = "_getCaseIndex";

    public static final String FUNC_ADDCASE = "addCase";

    public static final String FUNC_UPDATECASE = "updateCase";

    public static final String FUNC_CASEEXISTS = "caseExists";

    public static final String FUNC_GETALLCASES = "getAllCases";

    public static final String FUNC_GETCASE = "getCase";

    public static final String FUNC_DELETECASE = "deleteCase";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("3", "0xCeb9b73BB47495bdF34f29dDa3f80f605040A360");
    }

    @Deprecated
    protected CaseMonitor(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CaseMonitor(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CaseMonitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CaseMonitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> _getCaseIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETCASEINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addCase(byte[] _uuid, String _caseName, Boolean _isStudent, BigInteger _date) {
        final Function function = new Function(
                FUNC_ADDCASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.Utf8String(_caseName), 
                new org.web3j.abi.datatypes.Bool(_isStudent), 
                new org.web3j.abi.datatypes.generated.Uint256(_date)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCase(byte[] _uuid, String _caseName, Boolean _isStudent, BigInteger _date, BigInteger _state) {
        final Function function = new Function(
                FUNC_UPDATECASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.Utf8String(_caseName), 
                new org.web3j.abi.datatypes.Bool(_isStudent), 
                new org.web3j.abi.datatypes.generated.Uint256(_date), 
                new org.web3j.abi.datatypes.generated.Uint8(_state)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> caseExists(byte[] _uuid) {
        final Function function = new Function(FUNC_CASEEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getAllCases() {
        final Function function = new Function(FUNC_GETALLCASES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes16>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple7<byte[], String, Boolean, BigInteger, List<BigInteger>, List<BigInteger>, BigInteger>> getCase(byte[] _uuid) {
        final Function function = new Function(FUNC_GETCASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, Boolean, BigInteger, List<BigInteger>, List<BigInteger>, BigInteger>>(function,
                new Callable<Tuple7<byte[], String, Boolean, BigInteger, List<BigInteger>, List<BigInteger>, BigInteger>>() {
                    @Override
                    public Tuple7<byte[], String, Boolean, BigInteger, List<BigInteger>, List<BigInteger>, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, Boolean, BigInteger, List<BigInteger>, List<BigInteger>, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                convertToNative((List<Uint256>) results.get(4).getValue()), 
                                convertToNative((List<Uint8>) results.get(5).getValue()), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deleteCase(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETECASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CaseMonitor load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CaseMonitor(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CaseMonitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CaseMonitor(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CaseMonitor load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CaseMonitor(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CaseMonitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CaseMonitor(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CaseMonitor.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CaseMonitor.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CaseMonitor.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CaseMonitor.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
