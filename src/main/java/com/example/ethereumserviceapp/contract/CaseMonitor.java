package com.example.ethereumserviceapp.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings("rawtypes")
public class CaseMonitor extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50612c06806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80639ab5724e116100ad578063d871b5ad11610071578063d871b5ad1461083a578063ea028820146108b0578063f8c6c172146108fb578063fabf5b801461093c578063fb40c22a1461099157610121565b80639ab5724e14610500578063b47520be14610541578063bc8a4d0b1461059a578063d4988c1514610623578063d840e7171461067c57610121565b806356066bed116100f457806356066bed146102565780637f16a034146102c25780638b6e3374146103035780638e2aa1f3146103585780639719dbc4146104ab57610121565b80630a6184c1146101265780630d8f003b14610167578063235f4c12146101c057806345b10ce414610201575b600080fd5b6101656004803603602081101561013c57600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506109f0565b005b6101a66004803603602081101561017d57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610c48565b604051808215151515815260200191505060405180910390f35b6101ff600480360360208110156101d657600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610cd4565b005b6102406004803603602081101561021757600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506112e1565b6040518082815260200191505060405180910390f35b6102c0600480360360a081101561026c57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190505050611324565b005b610301600480360360208110156102d857600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506114f9565b005b6103426004803603602081101561031957600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919050505061196c565b6040518082815260200191505060405180910390f35b6103976004803603602081101561036e57600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506119af565b60405180856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561040e5780820151818401526020810190506103f3565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610450578082015181840152602081019050610435565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610492578082015181840152602081019050610477565b5050505090500197505050505050505060405180910390f35b6104ea600480360360208110156104c157600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611b41565b6040518082815260200191505060405180910390f35b61053f6004803603602081101561051657600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611b84565b005b6105806004803603602081101561055757600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611c8a565b604051808215151515815260200191505060405180910390f35b6105d9600480360360208110156105b057600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611d16565b60405180846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001838152602001828152602001935050505060405180910390f35b6106626004803603602081101561063957600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611d7e565b604051808215151515815260200191505060405180910390f35b6106bb6004803603602081101561069257600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611e0a565b60405180896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020018881526020018060200180602001806020018060200187600681111561070d57fe5b60ff16815260200186815260200185810385528b818151815260200191508051906020019060200280838360005b8381101561075657808201518184015260208101905061073b565b5050505090500185810384528a818151815260200191508051906020019060200280838360005b8381101561079857808201518184015260208101905061077d565b50505050905001858103835289818151815260200191508051906020019060200280838360005b838110156107da5780820151818401526020810190506107bf565b50505050905001858103825288818151815260200191508051906020019060200280838360005b8381101561081c578082015181840152602081019050610801565b505050509050019c5050505050505050505050505060405180910390f35b6108ae600480360360c081101561085057600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190803560ff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061201e565b005b6108f9600480360360408110156108c657600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190505050612178565b005b61093a6004803603602081101561091157600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506124b3565b005b61098f6004803603606081101561095257600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291908035906020019092919080359060200190929190505050612770565b005b6109996127c7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156109dc5780820151818401526020810190506109c1565b505050509050019250505060405180910390f35b6109f981610c48565b15610a0357600080fd5b60606001604051908082528060200260200182016040528015610a355781602001602082028038833980820191505090505b509050600081600081518110610a4757fe5b60200260200101818152505060606001604051908082528060200260200182016040528015610a855781602001602082028038833980820191505090505b509050600081600081518110610a9757fe5b60200260200101818152505060606001604051908082528060200260200182016040528015610ad55781602001602082028038833980820191505090505b509050600081600081518110610ae757fe5b60200260200101906006811115610afa57fe5b90816006811115610b0757fe5b8152505060026040518060800160405280866fffffffffffffffffffffffffffffffff19168152602001858152602001848152602001838152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506020820151816001019080519060200190610bb89291906128b3565b506040820151816002019080519060200190610bd59291906128b3565b506060820151816003019080519060200190610bf2929190612900565b50505050600060016002805490500390508060036000876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050505050565b6000806002805490501415610c605760009050610ccf565b816fffffffffffffffffffffffffffffffff19166002610c7f8461196c565b81548110610c8957fe5b906000526020600020906004020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19161415610cca5760019050610ccf565b600090505b919050565b610cdd81611d7e565b610ce657600080fd5b6000610cf1826112e1565b9050600160008054905003811461122057610d0a6129af565b60008281548110610d1757fe5b9060005260206000209060080201604051806101000160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610dc757602002820191906000526020600020905b815481526020019060010190808311610db3575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610e4d57602002820191906000526020600020906000905b82829054906101000a900460ff166006811115610e2757fe5b81526020019060010190602082600001049283019260010382029150808411610e0e5790505b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610ea557602002820191906000526020600020905b815481526020019060010190808311610e91575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610efd57602002820191906000526020600020905b815481526020019060010190808311610ee9575b505050505081526020016006820160009054906101000a900460ff166006811115610f2457fe5b6006811115610f2f57fe5b8152602001600782015481525050905060008060016000805490500381548110610f5557fe5b906000526020600020906008020160000160009054906101000a900460801b905060016000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009055600060016000805490500381548110610fc857fe5b906000526020600020906008020160008481548110610fe357fe5b90600052602060002090600802016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060018201548160010155600282018160020190805461104e929190612a12565b506003820181600301908054611065929190612a64565b50600482018160040190805461107c929190612a12565b506005820181600501908054611093929190612a12565b506006820160009054906101000a900460ff168160060160006101000a81548160ff021916908360068111156110c557fe5b021790555060078201548160070155905050816000600160008054905003815481106110ed57fe5b906000526020600020906008020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506020820151816001015560408201518160020190805190602001906111519291906128b3565b50606082015181600301908051906020019061116e929190612900565b50608082015181600401908051906020019061118b9291906128b3565b5060a08201518160050190805190602001906111a89291906128b3565b5060c08201518160060160006101000a81548160ff021916908360068111156111cd57fe5b021790555060e082015181600701559050508260016000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190555050505b600080548061122b57fe5b6001900381819060005260206000209060080201600080820160006101000a8154906fffffffffffffffffffffffffffffffff0219169055600182016000905560028201600061127b9190612ac4565b60038201600061128b9190612ae5565b60048201600061129b9190612ac4565b6005820160006112ab9190612ac4565b6006820160006101000a81549060ff02191690556007820160009055505090556112d4826114f9565b6112dd826124b3565b5050565b600060016000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b61132d85611d7e565b61133657600080fd5b6000611341866112e1565b9050600080828154811061135157fe5b90600052602060002090600802019050600061136c8861196c565b905060006002828154811061137d57fe5b9060005260206000209060040201905060008160010160008154811061139f57fe5b906000526020600020015414156114365786816001016000815481106113c157fe5b906000526020600020018190555085816002016000815481106113e057fe5b906000526020600020018190555087816003016000815481106113ff57fe5b90600052602060002090602091828204019190066101000a81548160ff0219169083600681111561142c57fe5b02179055506114e5565b80600101879080600181540180825580915050906001820390600052602060002001600090919290919091505550806002018690806001815401808255809150509060018203906000526020600020016000909192909190915055508060030188908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360068111156114de57fe5b0217905550505b848360070181905550505050505050505050565b61150281610c48565b61150b57600080fd5b60006115168261196c565b905060016002805490500381146118f15761152f612b0d565b6002828154811061153c57fe5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001600182018054806020026020016040519081016040528092919081815260200182805480156115e157602002820191906000526020600020905b8154815260200190600101908083116115cd575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561163957602002820191906000526020600020905b815481526020019060010190808311611625575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156116bf57602002820191906000526020600020906000905b82829054906101000a900460ff16600681111561169957fe5b815260200190600101906020826000010492830192600103820291508084116116805790505b505050505081525050905060006002600160028054905003815481106116e157fe5b906000526020600020906004020160000160009054906101000a900460801b905060036000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560026001600280549050038154811061175457fe5b90600052602060002090600402016002848154811061176f57fe5b90600052602060002090600402016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060018201816001019080546117d0929190612a12565b5060028201816002019080546117e7929190612a12565b5060038201816003019080546117fe929190612a64565b509050508160026001600280549050038154811061181857fe5b906000526020600020906004020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160010190805190602001906118729291906128b3565b50604082015181600201908051906020019061188f9291906128b3565b5060608201518160030190805190602001906118ac929190612900565b509050508260036000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190555050505b60028054806118fc57fe5b6001900381819060005260206000209060040201600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160006119449190612ac4565b6002820160006119549190612ac4565b6003820160006119649190612ae5565b505090555050565b600060036000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b600060608060606119bf85610c48565b6119c857600080fd5b600060026119d58761196c565b815481106119df57fe5b906000526020600020906004020190508060000160009054906101000a900460801b81600101826002018360030182805480602002602001604051908101604052809291908181526020018280548015611a5857602002820191906000526020600020905b815481526020019060010190808311611a44575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015611aaa57602002820191906000526020600020905b815481526020019060010190808311611a96575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611b2a57602002820191906000526020600020906000905b82829054906101000a900460ff166006811115611b0457fe5b81526020019060010190602082600001049283019260010382029150808411611aeb5790505b505050505090509450945094509450509193509193565b600060056000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b611b8d81611c8a565b15611b9757600080fd5b60046040518060600160405280836fffffffffffffffffffffffffffffffff191681526020016000815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506020820151816001015560408201518160020155505050600060016004805490500390508060056000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050565b6000806004805490501415611ca25760009050611d11565b816fffffffffffffffffffffffffffffffff19166004611cc184611b41565b81548110611ccb57fe5b906000526020600020906003020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19161415611d0c5760019050611d11565b600090505b919050565b6000806000611d2484611c8a565b611d2d57600080fd5b60006004611d3a86611b41565b81548110611d4457fe5b906000526020600020906003020190508060000160009054906101000a900460801b81600101548260020154935093509350509193909250565b6000806000805490501415611d965760009050611e05565b816fffffffffffffffffffffffffffffffff19166000611db5846112e1565b81548110611dbf57fe5b906000526020600020906008020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19161415611e005760019050611e05565b600090505b919050565b600080606080606080600080611e1f89611d7e565b611e2857600080fd5b600080611e348b6112e1565b81548110611e3e57fe5b906000526020600020906008020190508060000160009054906101000a900460801b8160010154826002018360030184600401856005018660060160009054906101000a900460ff16876007015485805480602002602001604051908101604052809291908181526020018280548015611ed757602002820191906000526020600020905b815481526020019060010190808311611ec3575b5050505050955084805480602002602001604051908101604052809291908181526020018280548015611f5757602002820191906000526020600020906000905b82829054906101000a900460ff166006811115611f3157fe5b81526020019060010190602082600001049283019260010382029150808411611f185790505b5050505050945083805480602002602001604051908101604052809291908181526020018280548015611fa957602002820191906000526020600020905b815481526020019060010190808311611f95575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015611ffb57602002820191906000526020600020905b815481526020019060010190808311611fe7575b505050505092509850985098509850985098509850985050919395975091939597565b61202786611d7e565b61203057600080fd5b600061203b876112e1565b9050600080828154811061204b57fe5b90600052602060002090600802019050868160010181905550806002018790806001815401808255809150509060018203906000526020600020016000909192909190915055508060030186908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360068111156120de57fe5b0217905550508060040185908060018154018082558091505090600182039060005260206000200160009091929091909150555080600501849080600181540180825580915050906001820390600052602060002001600090919290919091505550858160060160006101000a81548160ff0219169083600681111561216057fe5b02179055508281600701819055505050505050505050565b61218182611d7e565b1561218b57600080fd5b606060016040519080825280602002602001820160405280156121bd5781602001602082028038833980820191505090505b50905081816000815181106121ce57fe5b6020026020010181815250506060600160405190808252806020026020018201604052801561220c5781602001602082028038833980820191505090505b50905060008160008151811061221e57fe5b6020026020010190600681111561223157fe5b9081600681111561223e57fe5b81525050606060016040519080825280602002602001820160405280156122745781602001602082028038833980820191505090505b509050606060016040519080825280602002602001820160405280156122a95781602001602082028038833980820191505090505b5090506000826000815181106122bb57fe5b6020026020010181815250506000816000815181106122d657fe5b6020026020010181815250506000604051806101000160405280886fffffffffffffffffffffffffffffffff191681526020018781526020018681526020018581526020018481526020018381526020016000600681111561233457fe5b815260200160008152509080600181540180825580915050906001820390600052602060002090600802016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506020820151816001015560408201518160020190805190602001906123bf9291906128b3565b5060608201518160030190805190602001906123dc929190612900565b5060808201518160040190805190602001906123f99291906128b3565b5060a08201518160050190805190602001906124169291906128b3565b5060c08201518160060160006101000a81548160ff0219169083600681111561243b57fe5b021790555060e08201518160070155505050600060016000805490500390508060016000896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020819055506124a1876109f0565b6124aa87611b84565b50505050505050565b6124bc81611c8a565b6124c557600080fd5b60006124d082611b41565b90506001600480549050038114612715576124e9612b48565b600482815481106124f657fe5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001600182015481526020016002820154815250509050600060046001600480549050038154811061257957fe5b906000526020600020906003020160000160009054906101000a900460801b905060056000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600090556004600160048054905003815481106125ec57fe5b90600052602060002090600302016004848154811061260757fe5b90600052602060002090600302016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060018201548160010155600282015481600201559050508160046001600480549050038154811061267f57fe5b906000526020600020906003020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160010155604082015181600201559050508260056000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190555050505b600480548061272057fe5b6001900381819060005260206000209060030201600080820160006101000a8154906fffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055505090555050565b61277983611c8a565b61278257600080fd5b600061278d84611b41565b905060006004828154811061279e57fe5b906000526020600020906003020190508381600101819055508281600201819055505050505050565b6060806000805490506040519080825280602002602001820160405280156127fe5781602001602082028038833980820191505090505b5090506000808054905011156128ac5760008090506000808054905090505b60008111156128a9576000600182038154811061283657fe5b906000526020600020906008020160000160009054906101000a900460801b83838060010194508151811061286757fe5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505080806001900391505061281d565b50505b8091505090565b8280548282559060005260206000209081019282156128ef579160200282015b828111156128ee5782518255916020019190600101906128d3565b5b5090506128fc9190612b7c565b5090565b82805482825590600052602060002090601f0160209004810192821561299e5791602002820160005b8382111561296f57835183826101000a81548160ff0219169083600681111561294e57fe5b02179055509260200192600101602081600001049283019260010302612929565b801561299c5782816101000a81549060ff021916905560010160208160000104928301926001030261296f565b505b5090506129ab9190612ba1565b5090565b60405180610100016040528060006fffffffffffffffffffffffffffffffff19168152602001600081526020016060815260200160608152602001606081526020016060815260200160006006811115612a0557fe5b8152602001600081525090565b828054828255906000526020600020908101928215612a535760005260206000209182015b82811115612a52578254825591600101919060010190612a37565b5b509050612a609190612b7c565b5090565b82805482825590600052602060002090601f01602090048101928215612ab357600052602060002091601f016020900482015b82811115612ab2578254825591600101919060010190612a97565b5b509050612ac09190612ba1565b5090565b5080546000825590600052602060002090810190612ae29190612b7c565b50565b50805460008255601f016020900490600052602060002090810190612b0a9190612b7c565b50565b604051806080016040528060006fffffffffffffffffffffffffffffffff191681526020016060815260200160608152602001606081525090565b604051806060016040528060006fffffffffffffffffffffffffffffffff1916815260200160008152602001600081525090565b612b9e91905b80821115612b9a576000816000905550600101612b82565b5090565b90565b612bce91905b80821115612bca57600081816101000a81549060ff021916905550600101612ba7565b5090565b9056fea265627a7a723158208174f9bb5c63100b9e3fb905a5f44aec88e70884f676ffa62c05a26f65a99a0a64736f6c63430005100032";

    public static final String FUNC__GETCASEINDEX = "_getCaseIndex";

    public static final String FUNC__GETPAYMENTINDEX = "_getPaymentIndex";

    public static final String FUNC__GETREJECTIONINDEX = "_getRejectionIndex";

    public static final String FUNC_ADDCASE = "addCase";

    public static final String FUNC_ADDCASEPAYMENT = "addCasePayment";

    public static final String FUNC_ADDCASEREJECTION = "addCaseRejection";

    public static final String FUNC_UPDATECASE = "updateCase";

    public static final String FUNC_ADDPAYMENT = "addPayment";

    public static final String FUNC_UPDATEREJECTION = "updateRejection";

    public static final String FUNC_CASEEXISTS = "caseExists";

    public static final String FUNC_PAYMENTEXISTS = "paymentExists";

    public static final String FUNC_REJECTIONEXISTS = "rejectionExists";

    public static final String FUNC_GETALLCASES = "getAllCases";

    public static final String FUNC_GETCASE = "getCase";

    public static final String FUNC_GETPAYMENT = "getPayment";

    public static final String FUNC_GETREJECTION = "getRejection";

    public static final String FUNC_DELETECASE = "deleteCase";

    public static final String FUNC_DELETEPAYMENT = "deletePayment";

    public static final String FUNC_DELETEREJECTION = "deleteRejection";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("2018", "0x1858cCeC051049Fa1269E958da2d33bCA27c6Db8");
    }

    @Deprecated
    protected CaseMonitor(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CaseMonitor(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CaseMonitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CaseMonitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> _getCaseIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETCASEINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _getPaymentIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETPAYMENTINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _getRejectionIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETREJECTIONINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addCase(byte[] _uuid, BigInteger _date) {
        final Function function = new Function(
                FUNC_ADDCASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint256(_date)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addCasePayment(byte[] _uuid) {
        final Function function = new Function(
                FUNC_ADDCASEPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addCaseRejection(byte[] _uuid) {
        final Function function = new Function(
                FUNC_ADDCASEREJECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCase(byte[] _uuid, BigInteger _date, BigInteger _state, BigInteger _payPerDay, BigInteger _sumDaily, BigInteger _offset) {
        final Function function = new Function(
                FUNC_UPDATECASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint256(_date), 
                new org.web3j.abi.datatypes.generated.Uint8(_state), 
                new org.web3j.abi.datatypes.generated.Uint256(_payPerDay), 
                new org.web3j.abi.datatypes.generated.Uint256(_sumDaily), 
                new org.web3j.abi.datatypes.generated.Uint256(_offset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPayment(byte[] _uuid, BigInteger _state, BigInteger _pDate, BigInteger _payHistory, BigInteger _offset) {
        final Function function = new Function(
                FUNC_ADDPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint8(_state), 
                new org.web3j.abi.datatypes.generated.Uint256(_pDate), 
                new org.web3j.abi.datatypes.generated.Uint256(_payHistory), 
                new org.web3j.abi.datatypes.generated.Uint256(_offset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRejection(byte[] _uuid, BigInteger _rejectionCode, BigInteger _rejectionDate) {
        final Function function = new Function(
                FUNC_UPDATEREJECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint256(_rejectionCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_rejectionDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> caseExists(byte[] _uuid) {
        final Function function = new Function(FUNC_CASEEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> paymentExists(byte[] _uuid) {
        final Function function = new Function(FUNC_PAYMENTEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> rejectionExists(byte[] _uuid) {
        final Function function = new Function(FUNC_REJECTIONEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getAllCases() {
        final Function function = new Function(FUNC_GETALLCASES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes16>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>> getCase(byte[] _uuid) {
        final Function function = new Function(FUNC_GETCASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>>(function,
                new Callable<Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint8>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()), 
                                convertToNative((List<Uint256>) results.get(5).getValue()), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>>> getPayment(byte[] _uuid) {
        final Function function = new Function(FUNC_GETPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteFunctionCall<Tuple4<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple4<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple4<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint8>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<byte[], BigInteger, BigInteger>> getRejection(byte[] _uuid) {
        final Function function = new Function(FUNC_GETREJECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<byte[], BigInteger, BigInteger>>(function,
                new Callable<Tuple3<byte[], BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<byte[], BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<byte[], BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deleteCase(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETECASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deletePayment(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETEPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteRejection(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETEREJECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CaseMonitor load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CaseMonitor(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CaseMonitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CaseMonitor(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CaseMonitor load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CaseMonitor(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CaseMonitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CaseMonitor(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CaseMonitor.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CaseMonitor.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CaseMonitor.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CaseMonitor.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
