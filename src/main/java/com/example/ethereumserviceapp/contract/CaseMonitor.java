package com.example.ethereumserviceapp.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings("rawtypes")
public class CaseMonitor extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50612e18806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80639ab5724e116100ad578063d871b5ad11610071578063d871b5ad1461088c578063ea02882014610902578063f8c6c1721461094d578063fabf5b801461098e578063fb40c22a146109e357610121565b80639ab5724e14610552578063b47520be14610593578063bc8a4d0b146105ec578063d4988c1514610675578063d840e717146106ce57610121565b806345b10ce4116100f457806345b10ce4146102775780637f16a034146102cc5780638b6e33741461030d5780638e2aa1f3146103625780639719dbc4146104fd57610121565b80630a6184c1146101265780630d8f003b14610167578063235f4c12146101c05780632f32d03714610201575b600080fd5b6101656004803603602081101561013c57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610a42565b005b6101a66004803603602081101561017d57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610d0e565b604051808215151515815260200191505060405180910390f35b6101ff600480360360208110156101d657600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050610d9a565b005b610275600480360360c081101561021757600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291905050506113a7565b005b6102b66004803603602081101561028d57600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506115ca565b6040518082815260200191505060405180910390f35b61030b600480360360208110156102e257600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919050505061160d565b005b61034c6004803603602081101561032357600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611b1c565b6040518082815260200191505060405180910390f35b6103a16004803603602081101561037857600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611b5f565b60405180866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561041c578082015181840152602081019050610401565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561045e578082015181840152602081019050610443565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156104a0578082015181840152602081019050610485565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156104e25780820151818401526020810190506104c7565b50505050905001995050505050505050505060405180910390f35b61053c6004803603602081101561051357600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611d4c565b6040518082815260200191505060405180910390f35b6105916004803603602081101561056857600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611d8f565b005b6105d2600480360360208110156105a957600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611e95565b604051808215151515815260200191505060405180910390f35b61062b6004803603602081101561060257600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611f21565b60405180846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001838152602001828152602001935050505060405180910390f35b6106b46004803603602081101561068b57600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050611f89565b604051808215151515815260200191505060405180910390f35b61070d600480360360208110156106e457600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190505050612015565b60405180896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020018881526020018060200180602001806020018060200187600681111561075f57fe5b60ff16815260200186815260200185810385528b818151815260200191508051906020019060200280838360005b838110156107a857808201518184015260208101905061078d565b5050505090500185810384528a818151815260200191508051906020019060200280838360005b838110156107ea5780820151818401526020810190506107cf565b50505050905001858103835289818151815260200191508051906020019060200280838360005b8381101561082c578082015181840152602081019050610811565b50505050905001858103825288818151815260200191508051906020019060200280838360005b8381101561086e578082015181840152602081019050610853565b505050509050019c5050505050505050505050505060405180910390f35b610900600480360360c08110156108a257600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190505050612229565b005b61094b6004803603604081101561091857600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190505050612383565b005b61098c6004803603602081101561096357600080fd5b8101908080356fffffffffffffffffffffffffffffffff191690602001909291905050506126be565b005b6109e1600480360360608110156109a457600080fd5b8101908080356fffffffffffffffffffffffffffffffff19169060200190929190803590602001909291908035906020019092919050505061297b565b005b6109eb6129d2565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a2e578082015181840152602081019050610a13565b505050509050019250505060405180910390f35b610a4b81610d0e565b15610a5557600080fd5b60606001604051908082528060200260200182016040528015610a875781602001602082028038833980820191505090505b509050600081600081518110610a9957fe5b60200260200101818152505060606001604051908082528060200260200182016040528015610ad75781602001602082028038833980820191505090505b509050600081600081518110610ae957fe5b60200260200101818152505060606001604051908082528060200260200182016040528015610b275781602001602082028038833980820191505090505b509050600081600081518110610b3957fe5b60200260200101818152505060606001604051908082528060200260200182016040528015610b775781602001602082028038833980820191505090505b509050600081600081518110610b8957fe5b60200260200101906006811115610b9c57fe5b90816006811115610ba957fe5b8152505060026040518060a00160405280876fffffffffffffffffffffffffffffffff19168152602001868152602001858152602001848152602001838152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506020820151816001019080519060200190610c60929190612abe565b506040820151816002019080519060200190610c7d929190612abe565b506060820151816003019080519060200190610c9a929190612abe565b506080820151816004019080519060200190610cb7929190612b0b565b50505050600060016002805490500390508060036000886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002081905550505050505050565b6000806002805490501415610d265760009050610d95565b816fffffffffffffffffffffffffffffffff19166002610d4584611b1c565b81548110610d4f57fe5b906000526020600020906005020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19161415610d905760019050610d95565b600090505b919050565b610da381611f89565b610dac57600080fd5b6000610db7826115ca565b905060016000805490500381146112e657610dd0612bba565b60008281548110610ddd57fe5b9060005260206000209060080201604051806101000160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610e8d57602002820191906000526020600020905b815481526020019060010190808311610e79575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610f1357602002820191906000526020600020906000905b82829054906101000a900460ff166006811115610eed57fe5b81526020019060010190602082600001049283019260010382029150808411610ed45790505b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610f6b57602002820191906000526020600020905b815481526020019060010190808311610f57575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610fc357602002820191906000526020600020905b815481526020019060010190808311610faf575b505050505081526020016006820160009054906101000a900460ff166006811115610fea57fe5b6006811115610ff557fe5b815260200160078201548152505090506000806001600080549050038154811061101b57fe5b906000526020600020906008020160000160009054906101000a900460801b905060016000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560006001600080549050038154811061108e57fe5b9060005260206000209060080201600084815481106110a957fe5b90600052602060002090600802016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550600182015481600101556002820181600201908054611114929190612c1d565b50600382018160030190805461112b929190612c6f565b506004820181600401908054611142929190612c1d565b506005820181600501908054611159929190612c1d565b506006820160009054906101000a900460ff168160060160006101000a81548160ff0219169083600681111561118b57fe5b021790555060078201548160070155905050816000600160008054905003815481106111b357fe5b906000526020600020906008020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550602082015181600101556040820151816002019080519060200190611217929190612abe565b506060820151816003019080519060200190611234929190612b0b565b506080820151816004019080519060200190611251929190612abe565b5060a082015181600501908051906020019061126e929190612abe565b5060c08201518160060160006101000a81548160ff0219169083600681111561129357fe5b021790555060e082015181600701559050508260016000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190555050505b60008054806112f157fe5b6001900381819060005260206000209060080201600080820160006101000a8154906fffffffffffffffffffffffffffffffff021916905560018201600090556002820160006113419190612ccf565b6003820160006113519190612cf0565b6004820160006113619190612ccf565b6005820160006113719190612ccf565b6006820160006101000a81549060ff021916905560078201600090555050905561139a8261160d565b6113a3826126be565b5050565b6113b086611f89565b6113b957600080fd5b60006113c4876115ca565b905060008082815481106113d457fe5b9060005260206000209060080201905060006113ef89611b1c565b905060006002828154811061140057fe5b9060005260206000209060050201905060008160010160008154811061142257fe5b906000526020600020015414156114d857878160010160008154811061144457fe5b9060005260206000200181905550868160020160008154811061146357fe5b9060005260206000200181905550858160030160008154811061148257fe5b906000526020600020018190555088816004016000815481106114a157fe5b90600052602060002090602091828204019190066101000a81548160ff021916908360068111156114ce57fe5b02179055506115b5565b8060010188908060018154018082558091505090600182039060005260206000200160009091929091909150555080600201879080600181540180825580915050906001820390600052602060002001600090919290919091505550806003018690806001815401808255809150509060018203906000526020600020016000909192909190915055508060040189908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360068111156115ae57fe5b0217905550505b84836007018190555050505050505050505050565b600060016000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b61161681610d0e565b61161f57600080fd5b600061162a82611b1c565b90506001600280549050038114611a9157611643612d18565b6002828154811061165057fe5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001600182018054806020026020016040519081016040528092919081815260200182805480156116f557602002820191906000526020600020905b8154815260200190600101908083116116e1575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561174d57602002820191906000526020600020905b815481526020019060010190808311611739575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156117a557602002820191906000526020600020905b815481526020019060010190808311611791575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561182b57602002820191906000526020600020906000905b82829054906101000a900460ff16600681111561180557fe5b815260200190600101906020826000010492830192600103820291508084116117ec5790505b5050505050815250509050600060026001600280549050038154811061184d57fe5b906000526020600020906005020160000160009054906101000a900460801b905060036000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600090556002600160028054905003815481106118c057fe5b9060005260206000209060050201600284815481106118db57fe5b90600052602060002090600502016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550600182018160010190805461193c929190612c1d565b506002820181600201908054611953929190612c1d565b50600382018160030190805461196a929190612c1d565b506004820181600401908054611981929190612c6f565b509050508160026001600280549050038154811061199b57fe5b906000526020600020906005020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160010190805190602001906119f5929190612abe565b506040820151816002019080519060200190611a12929190612abe565b506060820151816003019080519060200190611a2f929190612abe565b506080820151816004019080519060200190611a4c929190612b0b565b509050508260036000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190555050505b6002805480611a9c57fe5b6001900381819060005260206000209060050201600080820160006101000a8154906fffffffffffffffffffffffffffffffff0219169055600182016000611ae49190612ccf565b600282016000611af49190612ccf565b600382016000611b049190612ccf565b600482016000611b149190612cf0565b505090555050565b600060036000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b6000606080606080611b7086610d0e565b611b7957600080fd5b60006002611b8688611b1c565b81548110611b9057fe5b906000526020600020906005020190508060000160009054906101000a900460801b8160010182600201836003018460040183805480602002602001604051908101604052809291908181526020018280548015611c0d57602002820191906000526020600020905b815481526020019060010190808311611bf9575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015611c5f57602002820191906000526020600020905b815481526020019060010190808311611c4b575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015611cb157602002820191906000526020600020905b815481526020019060010190808311611c9d575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611d3157602002820191906000526020600020906000905b82829054906101000a900460ff166006811115611d0b57fe5b81526020019060010190602082600001049283019260010382029150808411611cf25790505b50505050509050955095509550955095505091939590929450565b600060056000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b611d9881611e95565b15611da257600080fd5b60046040518060600160405280836fffffffffffffffffffffffffffffffff191681526020016000815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506020820151816001015560408201518160020155505050600060016004805490500390508060056000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050565b6000806004805490501415611ead5760009050611f1c565b816fffffffffffffffffffffffffffffffff19166004611ecc84611d4c565b81548110611ed657fe5b906000526020600020906003020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19161415611f175760019050611f1c565b600090505b919050565b6000806000611f2f84611e95565b611f3857600080fd5b60006004611f4586611d4c565b81548110611f4f57fe5b906000526020600020906003020190508060000160009054906101000a900460801b81600101548260020154935093509350509193909250565b6000806000805490501415611fa15760009050612010565b816fffffffffffffffffffffffffffffffff19166000611fc0846115ca565b81548110611fca57fe5b906000526020600020906008020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff1916141561200b5760019050612010565b600090505b919050565b60008060608060608060008061202a89611f89565b61203357600080fd5b60008061203f8b6115ca565b8154811061204957fe5b906000526020600020906008020190508060000160009054906101000a900460801b8160010154826002018360030184600401856005018660060160009054906101000a900460ff168760070154858054806020026020016040519081016040528092919081815260200182805480156120e257602002820191906000526020600020905b8154815260200190600101908083116120ce575b505050505095508480548060200260200160405190810160405280929190818152602001828054801561216257602002820191906000526020600020906000905b82829054906101000a900460ff16600681111561213c57fe5b815260200190600101906020826000010492830192600103820291508084116121235790505b50505050509450838054806020026020016040519081016040528092919081815260200182805480156121b457602002820191906000526020600020905b8154815260200190600101908083116121a0575b505050505093508280548060200260200160405190810160405280929190818152602001828054801561220657602002820191906000526020600020905b8154815260200190600101908083116121f2575b505050505092509850985098509850985098509850985050919395975091939597565b61223286611f89565b61223b57600080fd5b6000612246876115ca565b9050600080828154811061225657fe5b90600052602060002090600802019050868160010181905550806002018790806001815401808255809150509060018203906000526020600020016000909192909190915055508060030186908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360068111156122e957fe5b0217905550508060040185908060018154018082558091505090600182039060005260206000200160009091929091909150555080600501849080600181540180825580915050906001820390600052602060002001600090919290919091505550858160060160006101000a81548160ff0219169083600681111561236b57fe5b02179055508281600701819055505050505050505050565b61238c82611f89565b1561239657600080fd5b606060016040519080825280602002602001820160405280156123c85781602001602082028038833980820191505090505b50905081816000815181106123d957fe5b602002602001018181525050606060016040519080825280602002602001820160405280156124175781602001602082028038833980820191505090505b50905060008160008151811061242957fe5b6020026020010190600681111561243c57fe5b9081600681111561244957fe5b815250506060600160405190808252806020026020018201604052801561247f5781602001602082028038833980820191505090505b509050606060016040519080825280602002602001820160405280156124b45781602001602082028038833980820191505090505b5090506000826000815181106124c657fe5b6020026020010181815250506000816000815181106124e157fe5b6020026020010181815250506000604051806101000160405280886fffffffffffffffffffffffffffffffff191681526020018781526020018681526020018581526020018481526020018381526020016000600681111561253f57fe5b815260200160008152509080600181540180825580915050906001820390600052602060002090600802016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055506020820151816001015560408201518160020190805190602001906125ca929190612abe565b5060608201518160030190805190602001906125e7929190612b0b565b506080820151816004019080519060200190612604929190612abe565b5060a0820151816005019080519060200190612621929190612abe565b5060c08201518160060160006101000a81548160ff0219169083600681111561264657fe5b021790555060e08201518160070155505050600060016000805490500390508060016000896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020819055506126ac87610a42565b6126b587611d8f565b50505050505050565b6126c781611e95565b6126d057600080fd5b60006126db82611d4c565b90506001600480549050038114612920576126f4612d5a565b6004828154811061270157fe5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001600182015481526020016002820154815250509050600060046001600480549050038154811061278457fe5b906000526020600020906003020160000160009054906101000a900460801b905060056000826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600090556004600160048054905003815481106127f757fe5b90600052602060002090600302016004848154811061281257fe5b90600052602060002090600302016000820160009054906101000a900460801b8160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060018201548160010155600282015481600201559050508160046001600480549050038154811061288a57fe5b906000526020600020906003020160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160010155604082015181600201559050508260056000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190555050505b600480548061292b57fe5b6001900381819060005260206000209060030201600080820160006101000a8154906fffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055505090555050565b61298483611e95565b61298d57600080fd5b600061299884611d4c565b90506000600482815481106129a957fe5b906000526020600020906003020190508381600101819055508281600201819055505050505050565b606080600080549050604051908082528060200260200182016040528015612a095781602001602082028038833980820191505090505b509050600080805490501115612ab75760008090506000808054905090505b6000811115612ab45760006001820381548110612a4157fe5b906000526020600020906008020160000160009054906101000a900460801b838380600101945081518110612a7257fe5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff191681525050808060019003915050612a28565b50505b8091505090565b828054828255906000526020600020908101928215612afa579160200282015b82811115612af9578251825591602001919060010190612ade565b5b509050612b079190612d8e565b5090565b82805482825590600052602060002090601f01602090048101928215612ba95791602002820160005b83821115612b7a57835183826101000a81548160ff02191690836006811115612b5957fe5b02179055509260200192600101602081600001049283019260010302612b34565b8015612ba75782816101000a81549060ff0219169055600101602081600001049283019260010302612b7a565b505b509050612bb69190612db3565b5090565b60405180610100016040528060006fffffffffffffffffffffffffffffffff19168152602001600081526020016060815260200160608152602001606081526020016060815260200160006006811115612c1057fe5b8152602001600081525090565b828054828255906000526020600020908101928215612c5e5760005260206000209182015b82811115612c5d578254825591600101919060010190612c42565b5b509050612c6b9190612d8e565b5090565b82805482825590600052602060002090601f01602090048101928215612cbe57600052602060002091601f016020900482015b82811115612cbd578254825591600101919060010190612ca2565b5b509050612ccb9190612db3565b5090565b5080546000825590600052602060002090810190612ced9190612d8e565b50565b50805460008255601f016020900490600052602060002090810190612d159190612d8e565b50565b6040518060a0016040528060006fffffffffffffffffffffffffffffffff19168152602001606081526020016060815260200160608152602001606081525090565b604051806060016040528060006fffffffffffffffffffffffffffffffff1916815260200160008152602001600081525090565b612db091905b80821115612dac576000816000905550600101612d94565b5090565b90565b612de091905b80821115612ddc57600081816101000a81549060ff021916905550600101612db9565b5090565b9056fea265627a7a723158200626c6be03a43f65ec116a7a751f4807e97ec6562e2de4b5d8bafb1894bec4ab64736f6c63430005100032";

    public static final String FUNC__GETCASEINDEX = "_getCaseIndex";

    public static final String FUNC__GETPAYMENTINDEX = "_getPaymentIndex";

    public static final String FUNC__GETREJECTIONINDEX = "_getRejectionIndex";

    public static final String FUNC_ADDCASE = "addCase";

    public static final String FUNC_ADDCASEPAYMENT = "addCasePayment";

    public static final String FUNC_ADDCASEREJECTION = "addCaseRejection";

    public static final String FUNC_UPDATECASE = "updateCase";

    public static final String FUNC_ADDPAYMENT = "addPayment";

    public static final String FUNC_UPDATEREJECTION = "updateRejection";

    public static final String FUNC_CASEEXISTS = "caseExists";

    public static final String FUNC_PAYMENTEXISTS = "paymentExists";

    public static final String FUNC_REJECTIONEXISTS = "rejectionExists";

    public static final String FUNC_GETALLCASES = "getAllCases";

    public static final String FUNC_GETCASE = "getCase";

    public static final String FUNC_GETPAYMENT = "getPayment";

    public static final String FUNC_GETREJECTION = "getRejection";

    public static final String FUNC_DELETECASE = "deleteCase";

    public static final String FUNC_DELETEPAYMENT = "deletePayment";

    public static final String FUNC_DELETEREJECTION = "deleteRejection";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("2018", "0x2a85A14cB9Fefdf55f2Bb8550FEAe8f1C8595697");
    }

    @Deprecated
    protected CaseMonitor(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CaseMonitor(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CaseMonitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CaseMonitor(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> _getCaseIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETCASEINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _getPaymentIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETPAYMENTINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _getRejectionIndex(byte[] _uuid) {
        final Function function = new Function(FUNC__GETREJECTIONINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addCase(byte[] _uuid, BigInteger _date) {
        final Function function = new Function(
                FUNC_ADDCASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint256(_date)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addCasePayment(byte[] _uuid) {
        final Function function = new Function(
                FUNC_ADDCASEPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addCaseRejection(byte[] _uuid) {
        final Function function = new Function(
                FUNC_ADDCASEREJECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCase(byte[] _uuid, BigInteger _date, BigInteger _state, BigInteger _payPerDay, BigInteger _sumDaily, BigInteger _offset) {
        final Function function = new Function(
                FUNC_UPDATECASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint256(_date), 
                new org.web3j.abi.datatypes.generated.Uint8(_state), 
                new org.web3j.abi.datatypes.generated.Uint256(_payPerDay), 
                new org.web3j.abi.datatypes.generated.Uint256(_sumDaily), 
                new org.web3j.abi.datatypes.generated.Uint256(_offset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPayment(byte[] _uuid, BigInteger _state, BigInteger _pDate, BigInteger _payHistory, BigInteger _payCalculation, BigInteger _offset) {
        final Function function = new Function(
                FUNC_ADDPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint8(_state), 
                new org.web3j.abi.datatypes.generated.Uint256(_pDate), 
                new org.web3j.abi.datatypes.generated.Uint256(_payHistory), 
                new org.web3j.abi.datatypes.generated.Uint256(_payCalculation), 
                new org.web3j.abi.datatypes.generated.Uint256(_offset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRejection(byte[] _uuid, BigInteger _rejectionCode, BigInteger _rejectionDate) {
        final Function function = new Function(
                FUNC_UPDATEREJECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid), 
                new org.web3j.abi.datatypes.generated.Uint256(_rejectionCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_rejectionDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> caseExists(byte[] _uuid) {
        final Function function = new Function(FUNC_CASEEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> paymentExists(byte[] _uuid) {
        final Function function = new Function(FUNC_PAYMENTEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> rejectionExists(byte[] _uuid) {
        final Function function = new Function(FUNC_REJECTIONEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getAllCases() {
        final Function function = new Function(FUNC_GETALLCASES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes16>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>> getCase(byte[] _uuid) {
        final Function function = new Function(FUNC_GETCASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>>(function,
                new Callable<Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<byte[], BigInteger, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint8>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()), 
                                convertToNative((List<Uint256>) results.get(5).getValue()), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> getPayment(byte[] _uuid) {
        final Function function = new Function(FUNC_GETPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteFunctionCall<Tuple5<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple5<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<byte[], List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint256>) results.get(3).getValue()), 
                                convertToNative((List<Uint8>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<byte[], BigInteger, BigInteger>> getRejection(byte[] _uuid) {
        final Function function = new Function(FUNC_GETREJECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<byte[], BigInteger, BigInteger>>(function,
                new Callable<Tuple3<byte[], BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<byte[], BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<byte[], BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deleteCase(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETECASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deletePayment(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETEPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteRejection(byte[] _uuid) {
        final Function function = new Function(
                FUNC_DELETEREJECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_uuid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CaseMonitor load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CaseMonitor(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CaseMonitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CaseMonitor(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CaseMonitor load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CaseMonitor(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CaseMonitor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CaseMonitor(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CaseMonitor.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CaseMonitor.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CaseMonitor.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CaseMonitor> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CaseMonitor.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
